{"ast":null,"code":"import { phones } from \"../../core/data/phones\";\nimport { ShopActionTypes } from \"./shop.action.types\";\nconst initialState = {\n  products: phones,\n  cart: []\n};\nexport function shoppingListReducer(state = initialState, action) {\n  let updatedCart;\n  let updatedItemIndex;\n\n  switch (action.type) {\n    case ShopActionTypes.INCREMENT_CART_ITEM_QUANTITY:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(item => item.id === action.payload);\n\n      if (updatedItemIndex === -1 || updatedCart[updatedItemIndex]?.quantity > 9) {\n        return state;\n      }\n\n      const incrementedItem = { ...updatedCart[updatedItemIndex]\n      };\n\n      if (incrementedItem.quantity !== undefined) {\n        incrementedItem.quantity++;\n      }\n\n      updatedCart[updatedItemIndex] = incrementedItem;\n      return { ...state,\n        cart: updatedCart\n      };\n\n    case ShopActionTypes.DECREMENT_CART_ITEM_QUANTITY:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(item => item.id === action.payload);\n\n      if (updatedItemIndex === -1 || updatedCart[updatedItemIndex]?.quantity < 2) {\n        return state;\n      }\n\n      const decrementedItem = { ...updatedCart[updatedItemIndex]\n      };\n\n      if (decrementedItem.quantity !== undefined) {\n        decrementedItem.quantity--;\n      }\n\n      updatedCart[updatedItemIndex] = decrementedItem;\n      return { ...state,\n        cart: updatedCart\n      };\n\n    case ShopActionTypes.ADD_PRODUCT_TO_CART:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(item => item.id === action.payload.id);\n\n      if (updatedItemIndex < 0) {\n        updatedCart.push({ ...action.payload,\n          quantity: 1\n        });\n      } else {\n        const updatedItem = { ...updatedCart[updatedItemIndex]\n        };\n\n        if (updatedItem.quantity !== undefined) {\n          updatedItem.quantity++;\n        }\n\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n\n      return { ...state,\n        cart: updatedCart\n      };\n\n    case ShopActionTypes.REMOVE_PRODUCT_FROM_CART:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(item => item.id === action.payload);\n      updatedCart.splice(updatedItemIndex, 1);\n      return { ...state,\n        cart: updatedCart\n      };\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}